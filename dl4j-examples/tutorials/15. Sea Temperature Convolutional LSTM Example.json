{"paragraphs":[{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1519618167733_980922613","id":"20180226-040927_251667523","dateCreated":"2018-02-26T04:09:27+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3173"},{"text":"%md\n### Note\n\nPlease view the [README](https://github.com/deeplearning4j/deeplearning4j/tree/master/dl4j-examples/tutorials/README.md) to learn about installing, setting up dependencies, and importing notebooks in Zeppelin","user":"admin","dateUpdated":"2018-02-27T19:27:29+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Note</h3>\n<p>Please view the <a href=\"https://github.com/deeplearning4j/deeplearning4j/tree/master/dl4j-examples/tutorials/README.md\">README</a> to learn about installing, setting up dependencies, and importing notebooks in Zeppelin</p>\n"}]},"apps":[],"jobName":"paragraph_1519759581276_82390876","id":"20180227-192621_547479636","dateCreated":"2018-02-27T19:26:21+0000","dateStarted":"2018-02-27T19:27:29+0000","dateFinished":"2018-02-27T19:27:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3174"},{"text":"%md\n\n### Background\n\nIn this tutorial we will use a neural network to forecast daily sea temperatures. The data consists of 2-dimensional temperature grids of 8 seas: Bengal, Korean, Black, Mediterranean, Arabian, Japan, Bohai, and Okhotsk Seas from 1981 to 2017. The raw data was taken from the Earth System Research Laboratory (https://www.esrl.noaa.gov/psd/) and preprocessed into CSV file. Each example consists of fifty 2-dimensional temperature grids, and every grid is represented by a single row in a CSV file. Thus, each sequence is represented by a CSV file with 50 rows.\n\nFor this task, we will use a convolutional LSTM neural network to forecast next-day sea temperatures for a given sequence of temperature grids. Recall, a convolutional network is most often used for image data like the MNIST dataset (dataset of handwritten images). A convolutional network is appropriate for this type of gridded data, since each point in the 2-dimensional grid is related to its neighbor points. Furthermore, the data is sequential, and each temperature grid is related to the previous grids. Because of these long and short term dependencies, a LSTM is fitting for this task too. For these two reasons, we will combine the aspects from these two different neural network architectures into a single convolutional LSTM network.\n\nFor more information on the convolutional LSTM network structure, see https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Ng_Beyond_Short_Snippets_2015_CVPR_paper.pdf\n\n","user":"admin","dateUpdated":"2018-02-28T20:44:35+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Background</h3>\n<p>In this tutorial we will use a neural network to forecast daily sea temperatures. The data consists of 2-dimensional temperature grids of 8 seas: Bengal, Korean, Black, Mediterranean, Arabian, Japan, Bohai, and Okhotsk Seas from 1981 to 2017. The raw data was taken from the Earth System Research Laboratory (https://www.esrl.noaa.gov/psd/) and preprocessed into CSV file. Each example consists of fifty 2-dimensional temperature grids, and every grid is represented by a single row in a CSV file. Thus, each sequence is represented by a CSV file with 50 rows.</p>\n<p>For this task, we will use a convolutional LSTM neural network to forecast next-day sea temperatures for a given sequence of temperature grids. Recall, a convolutional network is most often used for image data like the MNIST dataset (dataset of handwritten images). A convolutional network is appropriate for this type of gridded data, since each point in the 2-dimensional grid is related to its neighbor points. Furthermore, the data is sequential, and each temperature grid is related to the previous grids. Because of these long and short term dependencies, a LSTM is fitting for this task too. For these two reasons, we will combine the aspects from these two different neural network architectures into a single convolutional LSTM network.</p>\n<p>For more information on the convolutional LSTM network structure, see https://www.cv-foundation.org/openaccess/content_cvpr_2015/papers/Ng_Beyond_Short_Snippets_2015_CVPR_paper.pdf</p>\n"}]},"apps":[],"jobName":"paragraph_1519759654016_1569738179","id":"20180227-192734_1160260969","dateCreated":"2018-02-27T19:27:34+0000","dateStarted":"2018-02-28T20:44:35+0000","dateFinished":"2018-02-28T20:44:35+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3175"},{"text":"%md\n### Imports","user":"admin","dateUpdated":"2018-02-28T20:44:37+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Imports</h3>\n"}]},"apps":[],"jobName":"paragraph_1519760015002_-1364865396","id":"20180227-193335_1287122015","dateCreated":"2018-02-27T19:33:35+0000","dateStarted":"2018-02-28T20:44:37+0000","dateFinished":"2018-02-28T20:44:37+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3176"},{"text":"import org.deeplearning4j.nn.api.OptimizationAlgorithm;\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration;\nimport org.deeplearning4j.nn.conf.layers.GravesLSTM;\nimport org.deeplearning4j.nn.weights.WeightInit;\nimport org.nd4j.linalg.activations.Activation;\nimport org.nd4j.linalg.api.ndarray.INDArray;\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork;\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator;\nimport org.deeplearning4j.nn.conf.layers.RnnOutputLayer;\nimport org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator;\nimport org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction;\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration;\nimport org.nd4j.linalg.dataset.DataSet;\nimport org.deeplearning4j.nn.conf.preprocessor.RnnToCnnPreProcessor;\nimport org.deeplearning4j.nn.conf.preprocessor.CnnToRnnPreProcessor;\nimport org.deeplearning4j.nn.conf.GradientNormalization;\nimport org.deeplearning4j.nn.conf.layers;\nimport org.deeplearning4j.eval.RegressionEvaluation;\nimport org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder;\nimport org.deeplearning4j.nn.conf.layers.ConvolutionLayer;\nimport org.deeplearning4j.nn.conf.Updater;\n\nimport org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader;\nimport org.datavec.api.records.reader.SequenceRecordReader;\nimport org.datavec.api.split.NumberedFileInputSplit;\n\nimport java.io.File;\nimport java.net.URL;\nimport java.io.BufferedInputStream;\nimport java.io.FileInputStream;\nimport java.io.BufferedOutputStream;\nimport java.io.FileOutputStream;\n\nimport org.apache.commons.io.FilenameUtils;\nimport org.apache.commons.io.FileUtils;\nimport org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\nimport org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\nimport org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n\n","user":"admin","dateUpdated":"2018-03-01T00:20:28+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.deeplearning4j.nn.api.OptimizationAlgorithm\nimport org.deeplearning4j.nn.conf.NeuralNetConfiguration\nimport org.deeplearning4j.nn.conf.layers.GravesLSTM\nimport org.deeplearning4j.nn.weights.WeightInit\nimport org.nd4j.linalg.activations.Activation\nimport org.nd4j.linalg.api.ndarray.INDArray\nimport org.deeplearning4j.nn.multilayer.MultiLayerNetwork\nimport org.nd4j.linalg.dataset.api.iterator.DataSetIterator\nimport org.deeplearning4j.nn.conf.layers.RnnOutputLayer\nimport org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator\nimport org.nd4j.linalg.lossfunctions.LossFunctions.LossFunction\nimport org.deeplearning4j.nn.conf.MultiLayerConfiguration\nimport org.nd4j.linalg.dataset.DataSet\nimport org.deeplearning4j.nn.conf.preprocessor.RnnToCnnPreProcessor\nimport org.deeplearning4j.nn.conf.preprocessor.CnnToRnnPreProcessor\nimport org.deeplearning4j.nn.conf.GradientNormalization\nimport org.deeplearning4j.nn.conf.layers\nimport org.deeplearning4j.eval.RegressionEvaluation\nimport org.deeplearning4j.nn.conf.layers.ConvolutionLayer.Builder\nimport org.deeplearning4j.nn.conf.layers.ConvolutionLayer\nimport org.deeplearning4j.nn.conf.Updater\nimport org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader\nimport org.datavec.api.records.reader.SequenceRecordReader\nimport org.datavec.api.split.NumberedFileInputSplit\nimport java.io.File\nimport java.net.URL\nimport java.io.BufferedInputStream\nimport java.io.FileInputStream\nimport java.io.BufferedOutputStream\nimport java.io.FileOutputStream\nimport org.apache.commons.io.FilenameUtils\nimport org.apache.commons.io.FileUtils\nimport org.apache.commons.compress.archivers.tar.TarArchiveInputStream\nimport org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream\nimport org.apache.commons.compress.archivers.tar.TarArchiveEntry\n"}]},"apps":[],"jobName":"paragraph_1519618171916_206823150","id":"20180226-040931_717744155","dateCreated":"2018-02-26T04:09:31+0000","dateStarted":"2018-03-01T00:20:28+0000","dateFinished":"2018-03-01T00:20:30+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3177"},{"text":"%md\n### Download Data","user":"admin","dateUpdated":"2018-02-28T20:45:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Download Data</h3>\n"}]},"apps":[],"jobName":"paragraph_1519760025197_-1537587004","id":"20180227-193345_527268888","dateCreated":"2018-02-27T19:33:45+0000","dateStarted":"2018-02-28T20:45:04+0000","dateFinished":"2018-02-28T20:45:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3178"},{"text":"%md\nTo download the data, we will create a temporary directory that will store the data files, extract the tar.gz file from the url, and place it in the specified directory.","user":"admin","dateUpdated":"2018-02-28T20:45:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>To download the data, we will create a temporary directory that will store the data files, extract the tar.gz file from the url, and place it in the specified directory.</p>\n"}]},"apps":[],"jobName":"paragraph_1519850717808_1201675449","id":"20180228-204517_252559836","dateCreated":"2018-02-28T20:45:17+0000","dateStarted":"2018-02-28T20:45:21+0000","dateFinished":"2018-02-28T20:45:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3179"},{"text":"val DATA_URL = \"https://bpstore1.blob.core.windows.net/seatemp/seas.tar.gz\"\nval DATA_PATH = FilenameUtils.concat(System.getProperty(\"java.io.tmpdir\"), \"dl4j_seas/\")","user":"admin","dateUpdated":"2018-03-01T00:14:04+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"DATA_URL: String = https://bpstore1.blob.core.windows.net/seatemp/seas.tar.gz\nDATA_PATH: String = /tmp/dl4j_seas/\n"}]},"apps":[],"jobName":"paragraph_1519620851940_-149610862","id":"20180226-045411_2004973787","dateCreated":"2018-02-26T04:54:11+0000","dateStarted":"2018-03-01T00:14:04+0000","dateFinished":"2018-03-01T00:14:04+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3180"},{"text":"val directory = new File(DATA_PATH)\ndirectory.mkdir() \n\nval archizePath = DATA_PATH + \"seas.tar.gz\"\nval archiveFile = new File(archizePath)\nval extractedPath = DATA_PATH + \"fifty\" \nval extractedFile = new File(extractedPath)\n\nFileUtils.copyURLToFile(new URL(DATA_URL), archiveFile) ","user":"admin","dateUpdated":"2018-03-01T00:14:07+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"directory: java.io.File = /tmp/dl4j_seas\nres28: Boolean = false\narchizePath: String = /tmp/dl4j_seas/seas.tar.gz\narchiveFile: java.io.File = /tmp/dl4j_seas/seas.tar.gz\nextractedPath: String = /tmp/dl4j_seas/fifty\nextractedFile: java.io.File = /tmp/dl4j_seas/fifty\n"}]},"apps":[],"jobName":"paragraph_1519620982824_-1141341929","id":"20180226-045622_1883168318","dateCreated":"2018-02-26T04:56:22+0000","dateStarted":"2018-03-01T00:14:07+0000","dateFinished":"2018-03-01T00:14:08+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3181"},{"text":"%md\nWe will then extract the data from the tar.gz file, recreate directories within the tar.gz file into our temporary directories, and copy the files from the tar.gz file.","user":"admin","dateUpdated":"2018-02-28T20:46:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We will then extract the data from the tar.gz file, recreate directories within the tar.gz file into our temporary directories, and copy the files from the tar.gz file.</p>\n"}]},"apps":[],"jobName":"paragraph_1519850747776_1696493183","id":"20180228-204547_621784709","dateCreated":"2018-02-28T20:45:47+0000","dateStarted":"2018-02-28T20:46:22+0000","dateFinished":"2018-02-28T20:46:22+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3182"},{"text":"var fileCount = 0\nvar dirCount = 0\nval BUFFER_SIZE = 4096\nval tais = new TarArchiveInputStream(new GzipCompressorInputStream( new BufferedInputStream( new FileInputStream(archizePath))))\n\nvar entry = tais.getNextEntry().asInstanceOf[TarArchiveEntry]\n\nwhile(entry != null){\n    if (entry.isDirectory()) {\n        new File(DATA_PATH + entry.getName()).mkdirs()\n        dirCount = dirCount + 1\n        fileCount = 0\n    }\n    else {\n        \n        val data = new Array[scala.Byte](4 * BUFFER_SIZE)\n\n        val fos = new FileOutputStream(DATA_PATH + entry.getName());\n        val dest = new BufferedOutputStream(fos, BUFFER_SIZE);\n        var count = tais.read(data, 0, BUFFER_SIZE)\n        \n        while (count != -1) {\n            dest.write(data, 0, count)\n            count = tais.read(data, 0, BUFFER_SIZE)\n        }\n        \n        dest.close()\n        fileCount = fileCount + 1\n    }\n    if(fileCount % 1000 == 0){\n        print(\".\")\n    }\n    \n    entry = tais.getNextEntry().asInstanceOf[TarArchiveEntry]\n}\n\n\n\n","user":"admin","dateUpdated":"2018-03-01T00:14:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"fileCount: Int = 0\ndirCount: Int = 0\nBUFFER_SIZE: Int = 4096\ntais: org.apache.commons.compress.archivers.tar.TarArchiveInputStream = org.apache.commons.compress.archivers.tar.TarArchiveInputStream@7b458046\nentry: org.apache.commons.compress.archivers.tar.TarArchiveEntry = org.apache.commons.compress.archivers.tar.TarArchiveEntry@b4061367\n......."}]},"apps":[],"jobName":"paragraph_1519620999524_1220277468","id":"20180226-045639_615846226","dateCreated":"2018-02-26T04:56:39+0000","dateStarted":"2018-03-01T00:14:09+0000","dateFinished":"2018-03-01T00:14:12+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3183"},{"text":"%md\n### DataSetIterators","user":"admin","dateUpdated":"2018-02-28T20:46:55+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>DataSetIterators</h3>\n"}]},"apps":[],"jobName":"paragraph_1519850800666_-1721338566","id":"20180228-204640_1112094027","dateCreated":"2018-02-28T20:46:40+0000","dateStarted":"2018-02-28T20:46:55+0000","dateFinished":"2018-02-28T20:46:55+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3184"},{"text":"%md\nNext we will convert the raw data (csv files) into DataSetIterators, which will be fed into a neural network. Our training data will have 1700 examples which will be represented by a single DataSetIterator, and the testing data will have 404 examples which will be represented by a separate DataSet Iterator.","user":"admin","dateUpdated":"2018-02-28T21:19:06+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>Next we will convert the raw data (csv files) into DataSetIterators, which will be fed into a neural network. Our training data will have 1700 examples which will be represented by a single DataSetIterator, and the testing data will have 404 examples which will be represented by a separate DataSet Iterator.</p>\n"}]},"apps":[],"jobName":"paragraph_1519850829081_-1826528257","id":"20180228-204709_1807307832","dateCreated":"2018-02-28T20:47:09+0000","dateStarted":"2018-02-28T21:19:06+0000","dateFinished":"2018-02-28T21:19:07+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3185"},{"text":"val path = FilenameUtils.concat(DATA_PATH, \"fifty/\") // set parent directory\n\nval featureBaseDir = FilenameUtils.concat(path, \"features\") // set feature directory\nval labelsBaseDir = FilenameUtils.concat(path, \"labels\") // set label directory","user":"admin","dateUpdated":"2018-03-01T00:14:13+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"path: String = /tmp/dl4j_seas/fifty/\nfeatureBaseDir: String = /tmp/dl4j_seas/fifty/features\nlabelsBaseDir: String = /tmp/dl4j_seas/fifty/labels\n"}]},"apps":[],"jobName":"paragraph_1519849662022_-1195414702","id":"20180228-202742_352342907","dateCreated":"2018-02-28T20:27:42+0000","dateStarted":"2018-03-01T00:14:13+0000","dateFinished":"2018-03-01T00:14:13+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3186"},{"text":"%md\nWe first initialize CSVSequenceRecordReaders, which will parse the raw data into record-like format. Then the SequenceRecordReaderDataSetIterators can be created using the RecordReaders. Since each example has exaclty 50 timesteps, an alignment mode of equal length is needed. Note also that this is a regression-based task and not a classification one.","user":"admin","dateUpdated":"2018-02-28T21:04:42+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We first initialize CSVSequenceRecordReaders, which will parse the raw data into record-like format. Then the SequenceRecordReaderDataSetIterators can be created using the RecordReaders. Since each example has exaclty 50 timesteps, an alignment mode of equal length is needed. Note also that this is a regression-based task and not a classification one.</p>\n"}]},"apps":[],"jobName":"paragraph_1519850821677_-1906186604","id":"20180228-204701_1601580223","dateCreated":"2018-02-28T20:47:01+0000","dateStarted":"2018-02-28T21:04:42+0000","dateFinished":"2018-02-28T21:04:42+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3187"},{"text":"val numSkipLines = 1;\nval regression = true;\nval batchSize = 32;\n\nval trainFeatures = new CSVSequenceRecordReader(numSkipLines, \",\");\ntrainFeatures.initialize( new NumberedFileInputSplit(featureBaseDir + \"/%d.csv\", 1, 1700));\nval trainLabels = new CSVSequenceRecordReader(numSkipLines, \",\");\ntrainLabels.initialize(new NumberedFileInputSplit(labelsBaseDir + \"/%d.csv\", 1, 1700));\n\nval train = new SequenceRecordReaderDataSetIterator(trainFeatures, trainLabels, batchSize,\n                10, regression, SequenceRecordReaderDataSetIterator.AlignmentMode.EQUAL_LENGTH);\n                \n                \nval testFeatures = new CSVSequenceRecordReader(numSkipLines, \",\");\ntestFeatures.initialize( new NumberedFileInputSplit(featureBaseDir + \"/%d.csv\", 1701, 2104));\nval testLabels = new CSVSequenceRecordReader(numSkipLines, \",\");\ntestLabels.initialize(new NumberedFileInputSplit(labelsBaseDir + \"/%d.csv\", 1701, 2104));\n\nval test = new SequenceRecordReaderDataSetIterator(testFeatures, testLabels, batchSize,\n                10, regression, SequenceRecordReaderDataSetIterator.AlignmentMode.EQUAL_LENGTH);","user":"admin","dateUpdated":"2018-03-01T00:14:15+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"numSkipLines: Int = 1\nregression: Boolean = true\nbatchSize: Int = 32\ntrainFeatures: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@6dfe69c0\ntrainLabels: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@7ae19fac\ntrain: org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator = org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator@60631e7\ntestFeatures: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@22d660b2\ntestLabels: org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader = org.datavec.api.records.reader.impl.csv.CSVSequenceRecordReader@7707f54\ntest: org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator = org.deeplearning4j.datasets.datavec.SequenceRecordReaderDataSetIterator@3ee06023\n"}]},"apps":[],"jobName":"paragraph_1519849810312_1529993264","id":"20180228-203010_961096132","dateCreated":"2018-02-28T20:30:10+0000","dateStarted":"2018-03-01T00:14:15+0000","dateFinished":"2018-03-01T00:14:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3188"},{"text":"%md \n\n### Neural Network","user":"admin","dateUpdated":"2018-02-28T20:51:14+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Neural Network</h3>\n"}]},"apps":[],"jobName":"paragraph_1519759558411_475958353","id":"20180227-192558_1730077226","dateCreated":"2018-02-27T19:25:58+0000","dateStarted":"2018-02-28T20:51:14+0000","dateFinished":"2018-02-28T20:51:14+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3189"},{"text":"%md\nThe next task is to initialize the  parameters for the convolutional LSTM neural network and then set up the neural network configuration.","user":"admin","dateUpdated":"2018-02-28T20:51:29+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>The next task is to initialize the  parameters for the convolutional LSTM neural network and then set up the neural network configuration.</p>\n"}]},"apps":[],"jobName":"paragraph_1519851075792_328201856","id":"20180228-205115_481934288","dateCreated":"2018-02-28T20:51:15+0000","dateStarted":"2018-02-28T20:51:29+0000","dateFinished":"2018-02-28T20:51:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3190"},{"text":"val V_HEIGHT = 13;\nval V_WIDTH = 4;\nval kernelSize = 2;\nval numChannels = 1;","user":"admin","dateUpdated":"2018-03-01T00:14:18+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"V_HEIGHT: Int = 13\nV_WIDTH: Int = 4\nkernelSize: Int = 2\nnumChannels: Int = 1\n"}]},"apps":[],"jobName":"paragraph_1519618182086_-1833115518","id":"20180226-040942_1672801042","dateCreated":"2018-02-26T04:09:42+0000","dateStarted":"2018-03-01T00:14:18+0000","dateFinished":"2018-03-01T00:14:18+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3191"},{"text":"%md\n\nIn the neural network configuraiton we will use the convolutional layer, LSTM layer, and output layer in success. In order to do this, we need to use the RnnToCnnPreProcessor and CnnToRnnPreprocessor. The RnnToCnnPreProcessor is used to reshape the 3-dimensional input from [batch size, height x width of grid, time series length ] into a 4 dimensional shape [number of examples x time series length , channels, width, height] which is suitable as input to a convolutional layer. The CnnToRnnPreProcessor is then used in a later layer to convert this convolutional shape back to the original 3-dimensional shape.","user":"admin","dateUpdated":"2018-02-28T21:02:36+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>In the neural network configuraiton we will use the convolutional layer, LSTM layer, and output layer in success. In order to do this, we need to use the RnnToCnnPreProcessor and CnnToRnnPreprocessor. The RnnToCnnPreProcessor is used to reshape the 3-dimensional input from [batch size, height x width of grid, time series length ] into a 4 dimensional shape [number of examples x time series length , channels, width, height] which is suitable as input to a convolutional layer. The CnnToRnnPreProcessor is then used in a later layer to convert this convolutional shape back to the original 3-dimensional shape.</p>\n"}]},"apps":[],"jobName":"paragraph_1519760783052_-2108297150","id":"20180227-194623_1042566542","dateCreated":"2018-02-27T19:46:23+0000","dateStarted":"2018-02-28T21:02:36+0000","dateFinished":"2018-02-28T21:02:36+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3192"},{"text":"val conf = new NeuralNetConfiguration.Builder()\n                .optimizationAlgo(OptimizationAlgorithm.STOCHASTIC_GRADIENT_DESCENT)\n                .seed(12345)\n                .weightInit(WeightInit.XAVIER)\n                .list()\n                .layer(0, new ConvolutionLayer.Builder(kernelSize, kernelSize)\n                        .updater(Updater.ADAGRAD)\n                        //.learningRate(0.005)\n                        .nIn(1) //1 channel\n                        .nOut(7)\n                        .stride(2, 2)\n                        .activation(Activation.RELU)\n                        .build())\n                .layer(1, new GravesLSTM.Builder()\n                        .activation(Activation.SOFTSIGN)\n                        .nIn(84)\n                        .nOut(200)\n                        .updater(Updater.ADAGRAD)\n                        //.learningRate(0.0005)\n                        .gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue)\n                        .gradientNormalizationThreshold(10)\n                        .build())\n                .layer(2, new RnnOutputLayer.Builder(LossFunction.MSE)\n                        .activation(Activation.IDENTITY)\n                        .nIn(200)\n                        .updater(Updater.ADAGRAD)\n                        //.learningRate(0.0005)\n                        .nOut(52)\n                        .gradientNormalization(GradientNormalization.ClipElementWiseAbsoluteValue)\n                        .gradientNormalizationThreshold(10)\n                        .build())\n                .inputPreProcessor(0, new RnnToCnnPreProcessor(V_HEIGHT, V_WIDTH, numChannels))\n                .inputPreProcessor(1, new CnnToRnnPreProcessor(6, 2, 7 ))\n                .pretrain(false).backprop(true)\n                .build();\n                \nval net = new MultiLayerNetwork(conf);\nnet.init();","user":"admin","dateUpdated":"2018-03-01T00:20:33+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"warning: there were 3 deprecation warning(s); re-run with -deprecation for details\nconf: org.deeplearning4j.nn.conf.MultiLayerConfiguration = \n{\n  \"backprop\" : true,\n  \"backpropType\" : \"Standard\",\n  \"cacheMode\" : \"NONE\",\n  \"confs\" : [ {\n    \"cacheMode\" : \"NONE\",\n    \"epochCount\" : 0,\n    \"iterationCount\" : 0,\n    \"l1ByParam\" : { },\n    \"l2ByParam\" : { },\n    \"layer\" : {\n      \"convolution\" : {\n        \"activationFn\" : {\n          \"ReLU\" : { }\n        },\n        \"biasInit\" : 0.0,\n        \"biasUpdater\" : null,\n        \"constraints\" : null,\n        \"convolutionMode\" : \"Truncate\",\n        \"cudnnAlgoMode\" : \"PREFER_FASTEST\",\n        \"cudnnBwdDataAlgo\" : null,\n        \"cudnnBwdFilterAlgo\" : null,\n        \"cudnnFwdAlgo\" : null,\n        \"dilation\" : [ 1, 1 ],\n        \"dist\" : null,\n        \"gradientNormalization\" : \"None\",\n        \"gradientNormalizationThreshold\" : 1.0,\n     ...net: org.deeplearning4j.nn.multilayer.MultiLayerNetwork = org.deeplearning4j.nn.multilayer.MultiLayerNetwork@1b6f7350\n"}]},"apps":[],"jobName":"paragraph_1519618467247_-2032204722","id":"20180226-041427_1422510576","dateCreated":"2018-02-26T04:14:27+0000","dateStarted":"2018-03-01T00:20:33+0000","dateFinished":"2018-03-01T00:20:33+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3193"},{"text":"%md\n\n### Model Training","user":"admin","dateUpdated":"2018-02-28T20:51:44+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Model Training</h3>\n"}]},"apps":[],"jobName":"paragraph_1519760116922_1294704536","id":"20180227-193516_850320192","dateCreated":"2018-02-27T19:35:16+0000","dateStarted":"2018-02-28T20:51:44+0000","dateFinished":"2018-02-28T20:51:44+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3194"},{"text":"%md\nTo train the model, we use 25 epochs with a for loop and simply call the fit method of the MultiLayerNetwork.","user":"admin","dateUpdated":"2018-02-28T20:51:54+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>To train the model, we use 25 epochs with a for loop and simply call the fit method of the MultiLayerNetwork.</p>\n"}]},"apps":[],"jobName":"paragraph_1519851106433_-1274030481","id":"20180228-205146_179808891","dateCreated":"2018-02-28T20:51:46+0000","dateStarted":"2018-02-28T20:51:54+0000","dateFinished":"2018-02-28T20:51:54+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3195"},{"text":"// Train model on training set\n\nfor( a <- 1 to 25){\n    println(\"Epoch\");\n    println(a)\n    net.fit( train );\n    train.reset();\n}","user":"admin","dateUpdated":"2018-03-01T00:20:56+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Epoch\n1\nEpoch\n2\nEpoch\n3\nEpoch\n4\nEpoch\n5\nEpoch\n6\nEpoch\n7\nEpoch\n8\nEpoch\n9\nEpoch\n10\nEpoch\n11\nEpoch\n12\nEpoch\n13\nEpoch\n14\nEpoch\n15\nEpoch\n16\nEpoch\n17\nEpoch\n18\nEpoch\n19\nEpoch\n20\nEpoch\n21\nEpoch\n22\nEpoch\n23\nEpoch\n24\nEpoch\n25\n"}]},"apps":[],"jobName":"paragraph_1519618483870_-22630569","id":"20180226-041443_1106893390","dateCreated":"2018-02-26T04:14:43+0000","dateStarted":"2018-03-01T00:20:56+0000","dateFinished":"2018-03-01T00:33:20+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3196"},{"text":"%md\n### Model Evaluation","user":"admin","dateUpdated":"2018-02-28T20:52:16+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<h3>Model Evaluation</h3>\n"}]},"apps":[],"jobName":"paragraph_1519760193836_-257128985","id":"20180227-193633_1813883250","dateCreated":"2018-02-27T19:36:33+0000","dateStarted":"2018-02-28T20:52:16+0000","dateFinished":"2018-02-28T20:52:16+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3197"},{"text":"%md\nWe will now evaluate our trained model. Note that we will use RegressionEvaluation, since our task is a regression and not a classification task.","user":"admin","dateUpdated":"2018-02-28T20:52:21+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","editorHide":true,"tableHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<p>We will now evaluate our trained model. Note that we will use RegressionEvaluation, since our task is a regression and not a classification task.</p>\n"}]},"apps":[],"jobName":"paragraph_1519851138209_2104126158","id":"20180228-205218_1696106790","dateCreated":"2018-02-28T20:52:18+0000","dateStarted":"2018-02-28T20:52:21+0000","dateFinished":"2018-02-28T20:52:21+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3198"},{"text":"val eval = net.evaluateRegression(test);\n\ntest.reset();\n\nwhile(test.hasNext()) {\n    val next = test.next();\n    val features = next.getFeatureMatrix();\n    val labels = next.getLabels();\n    val inMask = next.getFeaturesMaskArray();\n    val outMask = next.getLabelsMaskArray();\n    val predicted = net.output(features,false, inMask, outMask);\n\n    eval.evalTimeSeries(labels, predicted, outMask);\n}\n\nprintln( eval.stats() );","user":"admin","dateUpdated":"2018-03-01T00:21:02+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"eval: org.deeplearning4j.eval.RegressionEvaluation = RegressionEvaluation(initialized=true, columnNames=[col_0, col_1, col_2, col_3, col_4, col_5, col_6, col_7, col_8, col_9, col_10, col_11, col_12, col_13, col_14, col_15, col_16, col_17, col_18, col_19, col_20, col_21, col_22, col_23, col_24, col_25, col_26, col_27, col_28, col_29, col_30, col_31, col_32, col_33, col_34, col_35, col_36, col_37, col_38, col_39, col_40, col_41, col_42, col_43, col_44, col_45, col_46, col_47, col_48, col_49, col_50, col_51], precision=5, exampleCountPerColumn=[20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00,  20,200.00...Column     MSE            MAE            RMSE           RSE            PC             R^2            \ncol_0      2.19819e+00    1.00599e+00    1.48263e+00    2.37084e-02    9.89745e-01    9.76205e-01    \ncol_1      2.10439e+00    9.97354e-01    1.45065e+00    2.27138e-02    9.90592e-01    9.77202e-01    \ncol_2      2.26919e+00    1.04502e+00    1.50638e+00    2.44708e-02    9.89782e-01    9.75439e-01    \ncol_3      2.24478e+00    1.00501e+00    1.49826e+00    2.40622e-02    9.89713e-01    9.75848e-01    \ncol_4      2.17291e+00    1.01623e+00    1.47408e+00    2.34993e-02    9.90242e-01    9.76414e-01    \ncol_5      2.20736e+00    1.03421e+00    1.48572e+00    2.38533e-02    9.90346e-01    9.76057e-01    \ncol_6      1.93912e+00    9.22048e-01    1.39252e+00    2.09134e-02    9.91303e-01    9.79008e-01    \ncol_7      2.12381e+00    9.78717e-01    1.45733e+00    2.27790e-02    9.90675e-01    9.77133e-01    \ncol_8      2.09625e+00    9.71144e-01    1.44784e+00    2.27379e-02    9.90381e-01    9.77175e-01    \ncol_9      2.03803e+00    9.59559e-01    1.42760e+00    2.20954e-02    9.90882e-01    9.77821e-01    \ncol_10     2.01947e+00    9.48220e-01    1.42108e+00    2.18442e-02    9.90912e-01    9.78071e-01    \ncol_11     1.97600e+00    9.29168e-01    1.40570e+00    2.12462e-02    9.91282e-01    9.78670e-01    \ncol_12     1.96321e+00    9.48501e-01    1.40115e+00    2.13940e-02    9.91198e-01    9.78523e-01    \ncol_13     1.94192e+00    9.24119e-01    1.39353e+00    2.11805e-02    9.91219e-01    9.78736e-01    \ncol_14     1.82665e+00    8.72893e-01    1.35153e+00    1.98944e-02    9.91627e-01    9.80026e-01    \ncol_15     1.93499e+00    9.12767e-01    1.39104e+00    2.09447e-02    9.91333e-01    9.78971e-01    \ncol_16     1.85734e+00    8.96062e-01    1.36284e+00    2.03626e-02    9.91387e-01    9.79559e-01    \ncol_17     1.79879e+00    8.84753e-01    1.34119e+00    1.97772e-02    9.91882e-01    9.80144e-01    \ncol_18     1.87465e+00    8.88115e-01    1.36918e+00    2.06062e-02    9.91240e-01    9.79312e-01    \ncol_19     2.06901e+00    9.60983e-01    1.43841e+00    2.26069e-02    9.90712e-01    9.77302e-01    \ncol_20     1.85151e+00    8.98898e-01    1.36070e+00    2.04554e-02    9.91374e-01    9.79465e-01    \ncol_21     1.80719e+00    8.70777e-01    1.34432e+00    2.00218e-02    9.91522e-01    9.79900e-01    \ncol_22     1.87969e+00    8.89926e-01    1.37102e+00    2.08189e-02    9.91216e-01    9.79096e-01    \ncol_23     1.93049e+00    9.16176e-01    1.38942e+00    2.12639e-02    9.91264e-01    9.78649e-01    \ncol_24     1.90498e+00    8.88781e-01    1.38021e+00    2.12046e-02    9.90603e-01    9.78713e-01    \ncol_25     1.80939e+00    8.90969e-01    1.34514e+00    2.01560e-02    9.91770e-01    9.79763e-01    \ncol_26     1.80539e+00    8.68013e-01    1.34365e+00    2.00867e-02    9.91549e-01    9.79832e-01    \ncol_27     1.88870e+00    8.83570e-01    1.37430e+00    2.09082e-02    9.91093e-01    9.79007e-01    \ncol_28     1.93211e+00    9.20916e-01    1.39001e+00    2.16375e-02    9.90820e-01    9.78276e-01    \ncol_29     1.93861e+00    9.33540e-01    1.39234e+00    2.16839e-02    9.91164e-01    9.78230e-01    \ncol_30     1.84469e+00    8.92104e-01    1.35819e+00    2.05735e-02    9.91458e-01    9.79343e-01    \ncol_31     1.97667e+00    9.13804e-01    1.40594e+00    2.19296e-02    9.90619e-01    9.77981e-01    \ncol_32     1.80830e+00    8.72267e-01    1.34473e+00    2.03545e-02    9.91216e-01    9.79565e-01    \ncol_33     1.82635e+00    8.75149e-01    1.35142e+00    2.05178e-02    9.91240e-01    9.79400e-01    \ncol_34     2.00784e+00    9.32617e-01    1.41698e+00    2.24693e-02    9.90411e-01    9.77439e-01    \ncol_35     2.01181e+00    9.70375e-01    1.41838e+00    2.23743e-02    9.91267e-01    9.77532e-01    \ncol_36     2.04932e+00    9.51930e-01    1.43154e+00    2.32259e-02    9.90055e-01    9.76683e-01    \ncol_37     1.89103e+00    8.98090e-01    1.37515e+00    2.14126e-02    9.91116e-01    9.78501e-01    \ncol_38     1.79027e+00    8.35274e-01    1.33801e+00    2.01982e-02    9.91124e-01    9.79719e-01    \ncol_39     2.03444e+00    9.66486e-01    1.42634e+00    2.27797e-02    9.90995e-01    9.77126e-01    \ncol_40     2.08040e+00    9.76131e-01    1.44236e+00    2.37755e-02    9.90218e-01    9.76131e-01    \ncol_41     2.17326e+00    1.00333e+00    1.47420e+00    2.48656e-02    9.89672e-01    9.75035e-01    \ncol_42     2.12262e+00    9.86935e-01    1.45692e+00    2.42100e-02    9.89972e-01    9.75691e-01    \ncol_43     2.22594e+00    9.99445e-01    1.49196e+00    2.51453e-02    9.89609e-01    9.74752e-01    \ncol_44     2.03693e+00    9.38621e-01    1.42721e+00    2.34485e-02    9.89706e-01    9.76459e-01    \ncol_45     2.18416e+00    9.95283e-01    1.47789e+00    2.52000e-02    9.89167e-01    9.74699e-01    \ncol_46     2.34491e+00    1.04708e+00    1.53131e+00    2.69632e-02    9.88673e-01    9.72928e-01    \ncol_47     2.32975e+00    1.00183e+00    1.52635e+00    2.64614e-02    9.88192e-01    9.73433e-01    \ncol_48     2.24581e+00    1.01657e+00    1.49860e+00    2.59614e-02    9.88818e-01    9.73938e-01    \ncol_49     2.33354e+00    1.04068e+00    1.52759e+00    2.70103e-02    9.88121e-01    9.72883e-01    \ncol_50     2.42702e+00    1.08231e+00    1.55789e+00    2.79395e-02    9.88448e-01    9.71950e-01    \ncol_51     2.34694e+00    1.03236e+00    1.53197e+00    2.66120e-02    9.88785e-01    9.73285e-01    \n\n"}]},"apps":[],"jobName":"paragraph_1519760203646_277302561","id":"20180227-193643_1887676521","dateCreated":"2018-02-27T19:36:43+0000","dateStarted":"2018-03-01T00:21:02+0000","dateFinished":"2018-03-01T00:33:26+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3199"},{"user":"admin","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1519850197498_-1319165407","id":"20180228-203637_482752207","dateCreated":"2018-02-28T20:36:37+0000","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:3200"}],"name":"Sea Temperature Convolutional LSTM Example","id":"2D6C8J2QS","angularObjects":{"2D9577PF1:existing_process":[],"2D86VT151:existing_process":[],"2D7PUMBZ1:existing_process":[],"2D7V8B4SM:existing_process":[],"2D6JWT1U6:existing_process":[],"2D8S4RU7Z:existing_process":[],"2D9YYJMG9:existing_process":[],"2D86WT5A7:existing_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}